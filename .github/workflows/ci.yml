name: CI Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: data_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      VIRTUAL_ENV: venv
      PATH: venv/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$PATH
      DATABASE_URL: postgresql://postgres:password@postgres:5432/data_db
      TEST_DATABASE_URL: postgresql://postgres:password@postgres:5432/data_db_test
      pythonLocation: /opt/hostedtoolcache/Python/3.10.16/x64
      LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.16/x64/lib
      PGPASSWORD: password

    steps:
      # 1. Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # 2. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      # 3. List Docker containers (debugging)
      - name: List Docker Containers
        run: docker ps -a

      # 4. Download wait-for-it script (optional, for better waiting)
      - name: Download wait-for-it script
        run: |
          curl -o wait-for-it.sh https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh
          chmod +x wait-for-it.sh

      # 5. Wait for PostgreSQL using wait-for-it.sh
      - name: Wait for PostgreSQL
        run: ./wait-for-it.sh postgres:5432 --timeout=60 --strict -- echo "PostgreSQL is up"

      # 6. Check PostgreSQL Status
      - name: Check PostgreSQL Status
        run: |
          psql -h postgres -p 5432 -U postgres -c "\l"
        env:
          PGPASSWORD: password

      # 7. Create Test Database
      - name: Create Test Database
        run: |
          psql -h postgres -p 5432 -U postgres -c "CREATE DATABASE data_db_test;"
        env:
          PGPASSWORD: password

      # 8. Verify data_db_test exists
      - name: Verify data_db_test exists
        run: |
          psql -h postgres -p 5432 -U postgres -d data_db_test -c "\dt"
        env:
          PGPASSWORD: password

      # 9. Install Dependencies
      - name: Install Dependencies
        run: |
          python -m venv venv
          pip install --upgrade pip
          pip install pre-commit
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov

      # 10. Install and Run Pre-Commit Hooks
      - name: Install Pre-Commit Hooks
        run: |
          pre-commit install
          pre-commit run --all-files

      # 11. Apply Migrations to Test Database
      - name: Apply Migrations
        run: |
          alembic upgrade head
        env:
          DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
        working-directory: ./backend

      # 12. Cache pip dependencies to speed up builds
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: |
            venv/lib/python3.10/site-packages
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 13. Run Tests with pytest
      - name: Run Tests
        run: |
          pytest --cov=backend/app --cov-report=xml
        env:
          DATABASE_URL: ${{ env.TEST_DATABASE_URL }}

      # 14. Upload coverage report
      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml
