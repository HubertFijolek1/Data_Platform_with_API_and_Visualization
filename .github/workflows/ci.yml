name: CI Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: data_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      VIRTUAL_ENV: venv
      PATH: venv/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$PATH

    steps:
      # 1. Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # 2. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      # 3. Cache pip dependencies to speed up builds
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: |
            venv/lib/python3.10/site-packages
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4. Install dependencies
      - name: Install Dependencies
        run: |
          python -m venv venv
          pip install --upgrade pip
          for req in $(find . -name "requirements.txt"); do pip install -r $req; done
          pip install flake8 black isort pytest pytest-cov

      # 5. Lint with flake8
      - name: Lint with flake8
        run: |
          flake8 backend frontend --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 backend frontend --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      # 6. Sort imports with isort
      - name: Sort Imports with isort
        run: |
          isort .

      # 7. Format code with black
      - name: Format with black
        run: |
          black --check .

      # 8. Run tests with pytest
      - name: Run Tests
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/data_db
        run: |
          alembic upgrade head
          pytest --cov=./ --cov-report=xml -n auto

      # 9. Upload coverage report
      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml
